{{template "_header" .}}

<style>
  body {
    text-align: center;
    font-size: 1rem;
  }

  h1 {
    font-size: 2em;
  }

  p {
    margin: 5px 0;
  }

  .profile {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    top: 20px;
    right: 20px;
    position: absolute;
  }

  .profile-image {
    border-radius: 50%;
    object-fit: cover;
    margin-left: 10px;
  }

  .logout {
    background-color: inherit;
    color: inherit;
    border: 2px solid green;
    border-radius: 2px;
    padding: 5px;
    text-transform: uppercase;
    margin-left: 20px;
    cursor: pointer;
  }

  .success {
    display: inline-block;
    font-size: 1.5rem;
    margin: 20px;
    border: 2px solid gray;
    border-radius: 5px;
    padding: 20px 30px;
    margin-bottom: 50px;
  }

  .success-image {
    border-radius: 50%;
    object-fit: cover;
    margin: 10px 0;
    margin-bottom: 50px;
  }

  .post {
    display: inline-flex;
    text-decoration: none;
    justify-content: center;
    background: #191919 !important;
    padding: 20px;
    border-radius: 12px;
  }

  .post-profile {
    border-radius: 12px;
    object-fit: cover;
    margin-right: 20px;
  }

  .post-text {
    text-align: left;
  }

  .post-image {
    border-radius: 20px;
    max-width: 100%;
    max-height: 450px;
    margin-top: 10px;
  }

  .buttons {
    display: flex;
    font-size: 3rem;
    justify-content: center;
    align-items: center;
  }

  .buttons div {
    padding: 10px;
    cursor: pointer;
    border: 2px solid currentColor;
    width: 200px;
    margin: 30px;
  }

  #yes-button {
    color: rgb(0, 255, 0);
  }

  #no-button {
    color: red;
  }

  @media (max-width: 1000px) {
    body {
      font-size: 14px;
    }

    .profile {
      position: static;
    }

    .buttons {
      font-size: 2.25rem;
    }

    .buttons div {
      margin: 25px 15px;
    }
  }
</style>

{{ if .pub58 }}
<div class='profile'>
  Logged In As:
  <img class='profile-image' height="50" width="50"
    src="https://bitclout.com/api/v0/get-single-profile-picture/{{.pub58}}" />
  <form action="/logout" method="post" onsubmit="handleIdentityBitcloutLogout(); return false;">
    <input type="submit" name="logout" value="logout" class='logout' />
  </form>
</div>
{{ end }}

<h1>cloutcli's yes or no</h1>
<p>
  <a href="https://bitclout.com/u/cloutcli">cloutcli</a> invites you to play the yes-or-no diamond game.
</p>
<p>
  We display a random new post, yet to receive any diamonds.
</p>
<p>
  You keep saying NO until we present one to you that is so good, you can't resist.
</p>

{{ if .successTheirPub58 }}
<div class="success">
  Success! You gave 1 diamond to:
  <br />
  <img height="100" width='100' class='success-image'
    src="https://bitclout.com/api/v0/get-single-profile-picture/{{.successTheirPub58}}" />
  <br />
  for <a href="https://bitclout.com/posts/{{.successPostHashHex}}">this
    post</a>.
</div>
{{ end }}
<div class='buttons'>
  <div id='no-button' onclick="document.location.href='/yes-or-no';">
    ✖ NO</div>
  {{ if .pub58 }}
  <div id='yes-button'
    onclick="document.getElementById('yes-button').innerHTML='please wait...'; handleIdentityDiamondPost('{{.Post.PostHashHex}}', '{{.Post.PosterPub58}}');">
    ✔ YES</div>
  {{ else }}
  <div id='yes-button'
    onclick="document.getElementById('yes-button').innerHTML='please wait...'; handleIdentityBitcloutLogin('{{.Post.PostHashHex}}', '{{.Post.PosterPub58}}');">
    ✔ YES</div>
  {{ end }}
</div>
<a class='post' href="https://bitclout.com/posts/{{.Post.PostHashHex}}">
  <img width="50" height="50" class='post-profile'
    src="https://bitclout.com/api/v0/get-single-profile-picture/{{.Post.PosterPub58}}" />
  <div class='post-text'>
    {{range $j, $sub := .Post.BodyLines}}
      <p style="font-size: 1.2em">
        {{$sub}}
      </p>
    {{end}}
    <p>
      moments ago
      <br />
      {{ts .Post.Timestamp}}
    </p>
    {{range $j, $img := .Post.ImageURLs}}
      <img class='post-image' src="{{$img}}"/>
    {{end}}
  </div>
</a>

<script>
      function handleIdentityBitcloutLogout() {
         document.cookie = 'identity_pub58=; expires=Sun, 1 Jan 2026 00:00:00 UTC; path=/';
         document.cookie = 'identity_level=; expires=Sun, 1 Jan 2026 00:00:00 UTC; path=/';
         document.cookie = 'identity_hmac=; expires=Sun, 1 Jan 2026 00:00:00 UTC; path=/';
         document.cookie = 'identity_hex=; expires=Sun, 1 Jan 2026 00:00:00 UTC; path=/';
         window.location.reload(false);
      };

      function handleIdentityBitcloutLogin(postHashHex, theirPub58) {
        window.rememberPostHashHex = postHashHex;
        window.rememberTheirPub58 = theirPub58;
        window.identityWindow = window.open('https://identity.bitclout.com/log-in?accessLevelRequest=4', null, 'toolbar=no, width=800, height=1000, top=0, left=0');
      }
 
      function handleIdentityDiamondPost(postHashHex, theirPub58) {
        window.rememberPostHashHex = postHashHex;
        window.rememberTheirPub58 = theirPub58;

        fetch('/diamond', {
          method: 'post',
          headers: {
            'Accept': 'application/json, text/plain, */*',
            'Content-Type': 'application/x-www-form-urlencoded'
          },
          body: 'theirPub58='+theirPub58+'&postHashHex='+postHashHex
        }).then(res => res.text())
          .then(res => handleTheSign(res));
      }

      function handleTheSign(res) {

        console.log("res", res);
        var cookieMap = makeCookieMap()
        var thing = Object();
        thing.id = createUUID();
        thing.method = 'sign';
        thing.service = "identity";
        thing.payload = Object();
        thing.payload.accessLevel = 4;
        thing.payload.accessLevelHmac = cookieMap["identity_hmac"];
        thing.payload.encryptedSeedHex = cookieMap["identity_hex"];
        thing.payload.transactionHex = res;

        console.log(thing);
        let iframe = document.getElementById("identity");
        iframe.contentWindow.postMessage(thing, "*"); 
      }

      function makeCookieMap() {
        var cookieMap = Object();
        var cookies = document.cookie.split(';');
        for (var i=0; i<cookies.length; i++) {
          var tokens = cookies[i].split('=');
          cookieMap[tokens[0].trim()] = tokens[1];
        }
        return cookieMap;
      }

      function respond(window, id, payload) {
        window.postMessage({ id, service: "identity", payload }, "*");
      }
      
      window.addEventListener("message", function (event) {
        let method = event.data.method;
        if (method === "initialize") {
           respond(event.source, event.data.id, {});
        } else if (method === "login") {
            window.identityWindow.close();

            let eventPayload = event.data.payload;
            let pub58 = eventPayload.publicKeyAdded;
            var me = eventPayload.users[pub58];
            me.pub58 = pub58;

            document.cookie = 'identity_pub58='+pub58+'; expires=Sun, 1 Jan 2026 00:00:00 UTC; path=/';
            document.cookie = 'identity_level='+me.accessLevel+'; expires=Sun, 1 Jan 2026 00:00:00 UTC; path=/';
            document.cookie = 'identity_hmac='+me.accessLevelHmac+'; expires=Sun, 1 Jan 2026 00:00:00 UTC; path=/';
            document.cookie = 'identity_hex='+me.encryptedSeedHex+'; expires=Sun, 1 Jan 2026 00:00:00 UTC; path=/';
            handleIdentityDiamondPost(window.rememberPostHashHex, window.rememberTheirPub58);
        } else if (event.data.payload !== undefined && event.data.payload.signedTransactionHex !== undefined) {
          let signedTransactionHex = event.data.payload.signedTransactionHex;
          console.log("st", signedTransactionHex);

                fetch('/submit-tx', {
                  method: 'post',
                  headers: {
                    'Accept': 'application/json, text/plain, */*',
                    'Content-Type': 'application/x-www-form-urlencoded'
                  },
                  body: 'tx='+signedTransactionHex
                }).then(res => res.text())
                  .then(res => document.location.href='/yes-or-no?theirPub58=' + window.rememberTheirPub58 +
                               '&postHashHex=' + window.rememberPostHashHex);
                }
      });

      function createUUID() {

            let dt = new Date().getTime()

            const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = (dt + Math.random()*16)%16 | 0
                dt = Math.floor(dt/16)
                return (c=='x' ? r :(r&0x3|0x8)).toString(16)
            })

            return uuid
      }

    </script>
    <iframe
      class="hidden"
      id="identity"
      frameborder="0"
      src="https://identity.bitclout.com/embed"
      width="0" height="0"
      [style.display]="requestingStorageAccess ? 'block' : 'none'"></iframe>
{{template "_footer" .}}
